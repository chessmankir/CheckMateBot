// modules/cmd.deleted.js
const db = require('./db');

function escMdV2(s) {
  if (s === null || s === undefined) return '‚Äî';
  return String(s).replace(/([_*[\]()~`>#+\-=|{}.!\\])/g, '\\$1');
}
const sleep = (ms) => new Promise(r => setTimeout(r, ms));

async function sendChunks(bot, chatId, lines, header = '', chunkSize = 8, replyTo) {
  for (let i = 0; i < lines.length; i += chunkSize) {
    const part = lines.slice(i, i + chunkSize).join('\n\n');
    await bot.sendMessage(chatId, `${header}${part}`, {
      parse_mode: 'MarkdownV2',
      reply_to_message_id: replyTo
    });
    header = '';
  }
}

module.exports = function (bot) {
  bot.onText(/^!—É–¥–∞–ª—ë–Ω–Ω—ã–µ$/iu, async (msg) => {
    const chatId = msg.chat.id;

    try {
      await bot.sendMessage(chatId, 'üîé –ü—Ä–æ–≤–µ—Ä—è—é –∞–∫–∫–∞—É–Ω—Ç—ã‚Ä¶', {
        reply_to_message_id: msg.message_id
      });

      // –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ —Ç–µ—Ö, —É –∫–æ–≥–æ actor_id –∑–∞–¥–∞–Ω
      const { rows: members } = await db.query(`
        SELECT id, clan, actor_id, name, nickname, telegram_tag, city
        FROM clan_members
        WHERE actor_id IS NOT NULL
        ORDER BY clan, id
      `);

      const deleted = [];
      let scanned = 0;

      for (const m of members) {
        scanned++;
        try {
          const chat = await bot.getChat(m.actor_id);

          const isDeleted =
            chat?.first_name === 'Deleted Account' &&
            !chat?.username &&
            !chat?.last_name;

          if (isDeleted) deleted.push(m);
        } catch (e) {
          const desc =
            e?.response?.body?.description ||
            e?.message ||
            String(e);

          // –°—á–∏—Ç–∞–µ–º —É–¥–∞–ª—ë–Ω–Ω—ã–º —Ç–æ–ª—å–∫–æ —è–≤–Ω—ã–π –ø—Ä–∏–∑–Ω–∞–∫
          if (desc.includes('USER_DEACTIVATED')) {
            deleted.push(m);
          } else {
            // –ù–ï —Å—á–∏—Ç–∞–µ–º —É–¥–∞–ª—ë–Ω–Ω—ã–º:
            // - Bad Request: chat not found
            // - Forbidden: bot was blocked by the user
            // - –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞/–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            // console.warn(`[!—É–¥–∞–ª—ë–Ω–Ω—ã–µ] not-deleted actor_id=${m.actor_id}: ${desc}`);
          }
        }

        if (scanned % 25 === 0) await sleep(80);
      }

      if (!deleted.length) {
        return bot.sendMessage(chatId, '‚úÖ –£–¥–∞–ª—ë–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.', {
          reply_to_message_id: msg.message_id
        });
      }

      const lines = deleted.map(m =>
        `‚Ä¢ –ö–ª–∞–Ω ${escMdV2(m.clan ?? '‚Äî')}\n` +
        `  ID: \`${m.actor_id}\`\n` +
        `  –ù–∏–∫: ${escMdV2(m.nickname || m.name || '‚Äî')}\n` +
        `  Username: ${escMdV2(m.telegram_tag || '‚Äî')}\n` +
        `  –ì–æ—Ä–æ–¥: ${escMdV2(m.city || '‚Äî')}`
      );

      await sendChunks(bot, chatId, lines, '*–£–¥–∞–ª—ë–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:*\n\n', 8, msg.message_id);

    } catch (err) {
      console.error('!—É–¥–∞–ª—ë–Ω–Ω—ã–µ error:', err);
      bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤.', {
        reply_to_message_id: msg.message_id
      });
    }
  });
};
