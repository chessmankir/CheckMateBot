// modules/cmd.marriages.js
const pool = require('../handlers/db'); // 

function pad(n) { return n.toString().padStart(2, '0'); }

/**
 * –†–∞–∑–Ω–∏—Ü–∞ "–º–µ—Å—è—Ü—ã / –¥–Ω–∏ / —á–∞—Å—ã" –º–µ–∂–¥—É now –∏ started_at
 * –°—á–∏—Ç–∞–µ–º "—Ü–µ–ª—ã–µ –º–µ—Å—è—Ü—ã" –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ, –∑–∞—Ç–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –≤ –¥–Ω—è—Ö –∏ —á–∞—Å–∞—Ö.
 */
function diffPretty(startDate) {
  const start = new Date(startDate);
  const now = new Date();

  // –º–µ—Å—è—Ü—ã (–∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ)
  let months = (now.getFullYear() - start.getFullYear()) * 12 + (now.getMonth() - start.getMonth());
  // –µ—Å–ª–∏ "–¥–µ–Ω—å –≤ –º–µ—Å—è—Ü–µ" –µ—â—ë –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç ‚Äî —É–º–µ–Ω—å—à–∞–µ–º –Ω–∞ 1 –º–µ—Å—è—Ü
  const tmp = new Date(now.getFullYear(), now.getMonth(), start.getDate(), start.getHours(), start.getMinutes(), start.getSeconds());
  if (now < tmp) months = Math.max(0, months - 1);

  // –¥–∞—Ç–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ü–µ–ª—ã—Ö –º–µ—Å—è—Ü–µ–≤
  const afterMonths = new Date(start);
  afterMonths.setMonth(afterMonths.getMonth() + months);

  // –¥–Ω–∏ (—Ü–µ–ª—ã–µ)
  const msDay = 24 * 60 * 60 * 1000;
  let days = Math.floor((now - afterMonths) / msDay);
  if (days < 0) days = 0;

  // —á–∞—Å—ã (–æ—Å—Ç–∞—Ç–æ–∫)
  const afterDays = new Date(afterMonths.getTime() + days * msDay);
  let hours = Math.floor((now - afterDays) / (60 * 60 * 1000));
  if (hours < 0) hours = 0;

  // —Å–±–æ—Ä–∫–∞ —Å—Ç—Ä–æ–∫–∏
  const chunks = [];
  if (months > 0) {
    const m = months % 10;
    const mm = months % 100;
    const word = (mm >= 11 && mm <= 14) ? '–º–µ—Å—è—Ü–µ–≤'
      : (m === 1 ? '–º–µ—Å—è—Ü' : (m >= 2 && m <= 4 ? '–º–µ—Å—è—Ü–∞' : '–º–µ—Å—è—Ü–µ–≤'));
    chunks.push(`${months} ${word}`);
  }
  if (days > 0) chunks.push(`${days} –¥–Ω`);
  if (hours > 0 && months === 0) chunks.push(`${hours} —á`); // —á–∞—Å—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–µ–Ω—å—à–µ –º–µ—Å—è—Ü–∞
  if (chunks.length === 0) chunks.push('–º–µ–Ω–µ–µ —á–∞—Å–∞');

  return chunks.join(' ');
}

/**
 * –§–æ—Ä–º–∞—Ç @username –∏–ª–∏ –ò–º—è –§–∞–º–∏–ª–∏—è
 */
function formatName(row, side) {
  const u = side === 'a' ? row.a_username : row.b_username;
  const first = side === 'a' ? row.a_first_name : row.b_first_name;
  const last  = side === 'a' ? row.a_last_name  : row.b_last_name;

  if (u) return `${u}`;
  return [first || '', last || ''].join(' ').trim() || '–ë–µ–∑—ã–º—è–Ω–Ω—ã–π';
}

module.exports = function marriagesCommand(bot) {
  bot.onText(/^!–±—Ä–∞–∫–∏$/i, async (msg) => {
    const chatId = msg.chat.id;

    try {
      // 1) –¢—è–Ω–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–∞–∫–∏ —ç—Ç–æ–≥–æ —á–∞—Ç–∞, —Å—Ç–∞—Ä—à–∏–µ ‚Äì –ø–µ—Ä–≤—ã–º–∏
      const { rows } = await pool.query(`
        SELECT m.id, m.started_at,
               ua.telegram_tag AS a_username, ua.name AS a_first_name,
               ub.telegram_tag AS b_username, ub.name AS b_first_name
        FROM marriages m
        JOIN clan_members ua ON ua.actor_id = m.partner_a_id
        JOIN clan_members ub ON ub.actor_id = m.partner_b_id
        WHERE m.chat_id = $1 AND m.ended_at IS NULL
        ORDER BY m.started_at ASC;            -- —Å—Ç–∞—Ä—ã–µ –ø–∞—Ä—ã –≤—ã—à–µ (–∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω–µ)
      `, [chatId]);

      if (!rows.length) {
        return bot.sendMessage(chatId, '–ü–æ–∫–∞ –Ω–µ—Ç –±—Ä–∞–∫–æ–≤ –≤ —ç—Ç–æ–º —á–∞—Ç–µ üíî');
      }

      // 2) –ì–æ—Ç–æ–≤–∏–º —Å—Ç—Ä–æ–∫–∏
      const green = [];    // >= 1 –º–µ—Å
      const newly = [];    // < 1 –º–µ—Å
      for (const r of rows) {
        const left  = formatName(r, 'a');
        const right = formatName(r, 'b');
        const when  = diffPretty(r.started_at);
        const line  = `${left} + ${right} (${when})`;
        // –∫—Ä–∏—Ç–µ—Ä–∏–π: 1 –º–µ—Å—è—Ü –∏ –±–æ–ª–µ–µ ‚Äî "–∑–µ–ª—ë–Ω–∞—è"
        const mOld = (new Date().getFullYear() - new Date(r.started_at).getFullYear()) * 12
                   + (new Date().getMonth() - new Date(r.started_at).getMonth());
        // —É—Ç–æ—á–Ω–∏–º –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ (–∫–∞–∫ –≤ diffPretty)
        const start = new Date(r.started_at);
        const now = new Date();
        const tmp = new Date(now.getFullYear(), now.getMonth(), start.getDate(), start.getHours(), start.getMinutes(), start.getSeconds());
        const months = now < tmp ? Math.max(0, mOld - 1) : mOld;

        if (months >= 1) green.push(line); else newly.push(line);
      }

      // 3) –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      let text = 'üíç *–ë—Ä–∞–∫–∏ —ç—Ç–æ–≥–æ —á–∞—Ç–∞*\n\n';
      if (green.length) {
        text += 'üåø *–ó–µ–ª—ë–Ω–∞—è —Å–≤–∞–¥—å–±–∞*\n';
        green.forEach((l, i) => { text += `${i + 1}. ${l}\n`; });
        text += '\n';
      }
      if (newly.length) {
        text += 'ü¶Å *–ú–æ–ª–æ–¥–æ–∂—ë–Ω—ã*\n';
        const startIdx = green.length ? green.length + 1 : 1;
        newly.forEach((l, i) => { text += `${startIdx + i}. ${l}\n`; });
        text += '\n';
      }
      text += 'üí¨ –ß—Ç–æ–±—ã –≤—Å—Ç—É–ø–∏—Ç—å –≤ –±—Ä–∞–∫ —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —á–∞—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É `–±—Ä–∞–∫ @—é–∑–µ—Ä`.';

      await bot.sendMessage(chatId, text, { parse_mode: 'Markdown' }, {
                               reply_to_message_id: msg.message_id
                             }
                           );
    } catch (e) {
      console.error('!–±—Ä–∞–∫–∏ error', e);
      bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—Ä–∞–∫–æ–≤ üòø',{
                         reply_to_message_id: msg.message_id
                       }
                     );
    }
  });
};
