const db = require('../handlers/db'); // –ø—É—Ç—å –∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é –∫ –±–∞–∑–µ
const isAllowedChat = require('../admin/permissionChats');
const isAdminChat = require('../admin/permissionAdminChat');
const { getUserStats } = require('../handlers/activityTracker');
const getClanId = require('../clan/getClanId');

function escapeMarkdown(text) {
  if (!text) return '‚Äî';
  return text
    .replace(/_/g, '\\_')
    .replace(/\*/g, '\\*')
    .replace(/`/g, '\\`')
    .replace(/\[/g, '\\[');
}

function formatWhen(ts) {
  if (!ts) return '‚Äî';
  const d = new Date(ts);

  // –ø—Ä–∏–±–∞–≤–ª—è–µ–º 3 —á–∞—Å–∞
  d.setHours(d.getHours() + 3);

  const y = d.getFullYear();
  const m = String(d.getMonth() + 1).padStart(2, '0');
  const day = String(d.getDate()).padStart(2, '0');
  const hh = String(d.getHours()).padStart(2, '0');
  const mm = String(d.getMinutes()).padStart(2, '0');
  return `${day}-${m}-${y} ${hh}:${mm}`;
}

module.exports = function (bot) {
  bot.onText(/!–ø–æ–∏—Å–∫\s+(.+)/i, async (msg, match) => {
    const chatId = msg.chat.id;
    if (!isAdminChat(chatId)) return;

    const query = match[1].trim().toLowerCase();
    const clanId = await getClanId(chatId);
    try {
      const res = await db.query(
        `SELECT * FROM clan_members 
         WHERE LOWER(telegram_tag) = $1 and clan_id = $2
         OR CAST(pubg_id AS TEXT) = $1 
         OR LOWER(nickname) = $1
         LIMIT 1`,
        [query, clanId]
      );

      if (res.rows.length === 0) {
        return bot.sendMessage(chatId, `‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É "${query}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`, {
          reply_to_message_id: msg.message_id
        });
      }

      const user = res.rows[0];

      let message = `
üìÑ –ù–∞–π–¥–µ–Ω —É—á–∞—Å—Ç–Ω–∏–∫: ${user.telegram_tag || '(–Ω–µ—Ç —Ç–µ–≥–∞)'}

üë§ –ò–º—è: ${user.name || '(–Ω–µ—Ç –∏–º–µ–Ω–∏)'}
üßæ –ù–∏–∫: ${user.nickname || '(–Ω–µ—Ç –Ω–∏–∫–∞)'}
üÜî PUBG ID: ${user.pubg_id || '(–Ω–µ—Ç PUBG ID)'}
üìÖ –í–æ–∑—Ä–∞—Å—Ç: ${user.age || '(–Ω–µ —É–∫–∞–∑–∞–Ω)'}
üìç –ì–æ—Ä–æ–¥: ${user.city || '(–Ω–µ —É–∫–∞–∑–∞–Ω)'}
üè∞ –ö–ª–∞–Ω: ${user.clan || '(–Ω–µ —É–∫–∞–∑–∞–Ω)'}
      `.trim();

      let lastMsgStr = '‚Äî';
      try {
        const stats = await getUserStats(chatId, user.tgId);
        lastMsgStr = formatWhen(stats.lastMsgAt);
      } catch (e) {
        console.error('getUserStats error:', e);
      }
      
      message += `\nüïí –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${escapeMarkdown(lastMsgStr)}`;
      message += '\n' + (user.active ? "‚úÖ –í –∫–ª–∞–Ω–µ." : "‚õî –ó–∞–±–∞–Ω–µ–Ω.");
      bot.sendMessage(chatId, message, {
        reply_to_message_id: msg.message_id
      });

    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –±–∞–∑–µ:', err);
      bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞.', {
        reply_to_message_id: msg.message_id
      });
    }
  });
};

