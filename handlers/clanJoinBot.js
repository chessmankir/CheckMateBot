const fs = require('fs');
const DATA_FILE = 'clanMembers.json';

const usersInProcess = new Map();

function saveToJSON(userData) {
  console.log('save')
  let data = [];
  if (fs.existsSync(DATA_FILE)) {
    data = JSON.parse(fs.readFileSync(DATA_FILE));
  }
  data.push(userData);
  fs.writeFileSync(DATA_FILE, JSON.stringify(data, null, 2));
}

module.exports = function(bot, notifyChatId, inviteLink1, inviteLink2) {
  // –ö–æ–º–∞–Ω–¥–∞ /join
  bot.onText(/\/join/, (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(chatId, '–•–æ—á–µ—à—å –≤—Å—Ç—É–ø–∏—Ç—å –≤ –∫–ª–∞–Ω?', {
      reply_markup: {
        inline_keyboard: [
          [{ text: '‚úÖ –î–∞', callback_data: 'join_yes' }],
          [{ text: '‚ùå –ù–µ—Ç', callback_data: 'join_no' }]
        ]
      }
    });
  });

  bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;

    // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    const welcomeText = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º—å—é–Ω–∏—Ç–∏ Checkmate! ‚ôüÔ∏è';

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    bot.sendPhoto(chatId, fs.readFileSync('./Images/IMG_3371.png'), {
      caption: welcomeText,
      filename: 'welcome_image.png',
      reply_markup: {
        inline_keyboard: [
          [
            { text: '–¢–≥–∫ ChessmanKir üß©', url: 'https://t.me/chessmankirLive' },
            { text: '–ù–æ–≤–æ—Å—Ç–∏ Pubg ü§ù', url: 'https://t.me/winepubgm' }
          ],
          [
            { text: '–•–æ—á–µ—à—å –≤—Å—Ç—É–ø–∏—Ç—å –≤ –∫–ª–∞–Ω?', callback_data: 'join_clan' }
          ]
        ]
      }
    });
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è "–•–æ—á–µ—à—å –≤—Å—Ç—É–ø–∏—Ç—å –≤ –∫–ª–∞–Ω?"
  bot.on('callback_query', (query) => {
    const chatId = query.message.chat.id;

    if (query.data === 'join_clan') {
      bot.sendMessage(chatId, '–¢—ã —Ö–æ—á–µ—à—å –≤—Å—Ç—É–ø–∏—Ç—å –≤ –∫–ª–∞–Ω?', {
        reply_markup: {
          inline_keyboard: [
            [
              { text: '–î–∞ ‚úÖ', callback_data: 'join_yes' },
              { text: '–ù–µ—Ç ‚ùå', callback_data: 'join_no' }
            ]
          ]
        }
      });
    }
  });


  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –î–∞/–ù–µ—Ç
  bot.on('callback_query', (query) => {
    const chatId = query.message.chat.id;
    const userId = query.from.id;

    if (query.data === 'join_no') {
      bot.sendMessage(chatId, '–•–æ—Ä–æ—à–æ, –º–æ–∂–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ üòä');
      return;
    }

    if (query.data === 'join_yes') {
      usersInProcess.set(userId, { step: 'invite', data: {} });
      bot.sendMessage(chatId, '–í–≤–µ–¥–∏ —Å–≤–æ–π –∏–Ω–≤–∞–π—Ç-–∫–æ–¥:');
      
    }
  });

  // –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
  bot.on('message', (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!msg.text || msg.text.startsWith('/')) return;
    if (!usersInProcess.has(userId)) return;

    const user = usersInProcess.get(userId);
    const text = msg.text.trim();

    if (user.step === 'invite'){
      const inviteCode = text;
      const codes = fs.existsSync('./data/invite_codes.json')
        ? JSON.parse(fs.readFileSync('./data/invite_codes.json'))
        : [];

      const found = codes.find(c => c.code === inviteCode && !c.used);
      if (!found) {
        bot.sendMessage(chatId, '‚ùå –ö–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. –í–≤–µ–¥–∏ —Å–Ω–æ–≤–∞:');
        return;
      }

      // –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
      found.used = true;
      fs.writeFileSync('./data/invite_codes.json', JSON.stringify(codes, null, 2));

      user.data.clan = found.clan; // ‚Üê —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –∫–ª–∞–Ω–∞
      user.step = 'id';
      bot.sendMessage(chatId, '–ö–æ–¥ –ø—Ä–∏–Ω—è—Ç. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π PUBG ID:');
    }

   else if (user.step === 'id') {
      user.data.pubgId = text;
      user.step = 'name';
      bot.sendMessage(chatId, '–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è:');
    } else if (user.step === 'name') {
      user.data.name = text;
      user.step = 'age';
      bot.sendMessage(chatId, '–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?');
    } else if (user.step === 'age') {
      user.data.age = text;
      user.step = 'city';
      bot.sendMessage(chatId, '–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞?');
    } else if (user.step === 'city') {
      user.data.city = text;

      saveToJSON({
        telegram_id: userId,
        telegram_username: msg.from.username || '',
        ...user.data
      });
      
      bot.sendMessage(chatId, `üéâ –¢—ã –ø—Ä–∏–Ω—è—Ç –≤ –∫–ª–∞–Ω!\nüì• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ:` + inviteLink1);
      usersInProcess.delete(userId);
    }
  });
};