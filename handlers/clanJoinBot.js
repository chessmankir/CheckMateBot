const db = require('./db');
const fs = require('fs');
const saveDescription = require('./saveDescriptionFunc');
const isAllowedChat = require('../admin/permissionChats'); // –ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
const saveMemberDb = require('./saveMemberDb');
const getPlayerDescription = require('./../db/getDescriptionDb');

const usersInProcess = new Map();

function hasUsername(from) {
  // username –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π
  return Boolean(from && typeof from.username === 'string' && from.username.trim().length > 0);
}

module.exports = function (bot, notifyChatId, inviteLink1, inviteLink2) {
  // /start ‚Äî —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ
  bot.onText(/^\/start$/, (msg) => {
    if (msg.chat.type !== 'private') return; // –∏–≥–Ω–æ—Ä –≤ –≥—Ä—É–ø–ø–∞—Ö

    const chatId = msg.chat.id;
    const welcomeText = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º—å—é–Ω–∏—Ç–∏ Checkmate! ‚ôüÔ∏è';

    bot.sendPhoto(chatId, fs.readFileSync('./Images/IMG_3371.png'), {
      caption: welcomeText,
      filename: 'welcome_image.png',
      reply_markup: {
        inline_keyboard: [
          [
            { text: '–¢–≥–∫ ChessmanKir üß©', url: 'https://t.me/chessmankirLive' },
            { text: '–ù–æ–≤–æ—Å—Ç–∏ Pubg ü§ù', url: 'https://t.me/winepubgm' }
          ],
          [
            { text: '–•–æ—á–µ—à—å –≤—Å—Ç—É–ø–∏—Ç—å –≤ –∫–ª–∞–Ω?', callback_data: 'join_clan' }
          ]
        ]
      }
    });
  });

  // –ö–Ω–æ–ø–∫–∏
  bot.on('callback_query', async (query) => {
    const chat = query.message?.chat;
    const chatId = chat?.id;
    const userId = query.from.id;

    // –ó–∞–ø—Ä–µ—Ç –∑–∞–ø—É—Å–∫–∞ –∏–∑ –≥—Ä—É–ø–ø/–∫–∞–Ω–∞–ª–æ–≤
    if (chat?.type !== 'private') {
      await bot.answerCallbackQuery(query.id);
      return bot.sendMessage(
        chatId,
        '–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–∞–ø–∏—à–∏ –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –Ω–∞–∂–º–∏ /start.'
      );
    }

    // 0) –ü—Ä–µ–¥–ø—Ä–æ–≤–µ—Ä–∫–∞ username –ø—Ä–∏ –∫–ª–∏–∫–µ "–•–æ—á–µ—à—å –≤—Å—Ç—É–ø–∏—Ç—å –≤ –∫–ª–∞–Ω?"
    if (query.data === 'join_clan') {
      await bot.answerCallbackQuery(query.id);

      if (!hasUsername(query.from)) {
        // –ù–µ—Ç username ‚Äî –æ–±—ä—è—Å–Ω—è–µ–º –∏ –¥–∞—ë–º –∫–Ω–æ–ø–∫—É –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        return bot.sendMessage(chatId,
          '‚ö†Ô∏è –£ —Ç–µ–±—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω Telegram username.\n\n' +
          '–≠—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞ ‚Äî –ø–æ –Ω–µ–º—É –º—ã —Å–≤—è–∑—ã–≤–∞–µ–º –∞–Ω–∫–µ—Ç—ã –∏ –ø—Ä–æ—Ñ–∏–ª–∏.\n\n' +
          'üëâ –û—Ç–∫—Ä–æ–π —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å Telegram –∏ —É—Å—Ç–∞–Ω–æ–≤–∏ username (–Ω–∞–ø—Ä. ChessFan123). ' +
          '–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –∏ —è –ø—Ä–æ–≤–µ—Ä—é –µ—â—ë —Ä–∞–∑.',
          {
            reply_markup: {
              inline_keyboard: [
                [
                  { text: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å username', callback_data: 'check_username' }
                ]
              ]
            }
          }
        );
      }

      // username –µ—Å—Ç—å ‚Äî –∏–¥—ë–º –ø–æ –æ–±—ã—á–Ω–æ–º—É —Å—Ü–µ–Ω–∞—Ä–∏—é
      return bot.sendMessage(chatId, '–¢—ã —Ö–æ—á–µ—à—å –≤—Å—Ç—É–ø–∏—Ç—å –≤ –∫–ª–∞–Ω?', {
        reply_markup: {
          inline_keyboard: [
            [
              { text: '–î–∞ ‚úÖ', callback_data: 'join_yes' },
              { text: '–ù–µ—Ç ‚ùå', callback_data: 'join_no' }
            ]
          ]
        }
      });
    }

    // 0.1) –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å username"
    if (query.data === 'check_username') {
      await bot.answerCallbackQuery(query.id);
      if (!hasUsername(query.from)) {
        // –í—Å—ë –µ—â—ë –Ω–µ—Ç username ‚Äî –ø—Ä–æ—Å–∏–º —Å–Ω–æ–≤–∞
        return bot.sendMessage(chatId,
          '‚ùå Username –≤—Å—ë –µ—â—ë –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.\n\n' +
          '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–π–¥–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å Telegram –∏ –∑–∞–¥–∞–π username. ' +
          '–ó–∞—Ç–µ–º –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —è –ø—Ä–æ–≤–µ—Ä–∏–ª –µ—â—ë —Ä–∞–∑.',
          {
            reply_markup: {
              inline_keyboard: [
                [
                  { text: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å username', callback_data: 'check_username' }
                ]
              ]
            }
          }
        );
      }

      // –û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –µ—Å—Ç—å ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
      return bot.sendMessage(chatId, '–û—Ç–ª–∏—á–Ω–æ! Username –Ω–∞–π–¥–µ–Ω ‚úÖ\n\n–¢—ã —Ö–æ—á–µ—à—å –≤—Å—Ç—É–ø–∏—Ç—å –≤ –∫–ª–∞–Ω?', {
        reply_markup: {
          inline_keyboard: [
            [
              { text: '–î–∞ ‚úÖ', callback_data: 'join_yes' },
              { text: '–ù–µ—Ç ‚ùå', callback_data: 'join_no' }
            ]
          ]
        }
      });
    }

    if (query.data === 'join_no') {
      await bot.answerCallbackQuery(query.id);
      return bot.sendMessage(chatId, '–•–æ—Ä–æ—à–æ, –º–æ–∂–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ üòä', {
        reply_to_message_id: query.message.message_id
      });
    }

    if (query.data === 'join_yes') {
      await bot.answerCallbackQuery(query.id);

      // –î–æ–ø. –∑–∞—â–∏—Ç–∞: –µ—Å–ª–∏ —é–∑–µ—Ä –¥–æ—à—ë–ª —Å—é–¥–∞ –±–µ–∑ username (–ø–æ—á—Ç–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
      if (!hasUsername(query.from)) {
        return bot.sendMessage(chatId,
          '‚ö†Ô∏è –ü–µ—Ä–µ–¥ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ–º –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Telegram username.\n' +
          '–ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å username¬ª.',
          {
            reply_markup: {
              inline_keyboard: [
                [
                  { text: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å username', callback_data: 'check_username' }
                ]
              ]
            }
          }
        );
      }

      // —Å–æ—Ö—Ä–∞–Ω—è–µ–º, –≤ –∫–∞–∫–æ–º —á–∞—Ç–µ –∏–¥—ë—Ç –∞–Ω–∫–µ—Ç–∞ (–ª–∏—á–∫–∞)
      const player = await getPlayerDescription(userId);
      if (player != null) {
        bot.sendMessage(chatId, '–í—ã —É–∂–µ –±—ã–ª–∏ –≤ –∫–ª–∞–Ω–µ', {
          reply_to_message_id: query.message.message_id
        });
        return;
      }

      usersInProcess.set(userId, { step: 'invite', expectedChatId: chatId, data: {} });
      return bot.sendMessage(chatId, '–í–≤–µ–¥–∏ —Å–≤–æ–π –∏–Ω–≤–∞–π—Ç-–∫–æ–¥:', {
        reply_to_message_id: query.message.message_id
      });
    }
  });

  // –ü–æ—à–∞–≥–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞ ‚Äî —Ç–æ–ª—å–∫–æ –ª–∏—á–∫–∞ –∏ —Ç–æ–ª—å–∫–æ —Ç–æ—Ç –∂–µ —á–∞—Ç
  bot.on('message', async (msg) => {
    if (msg.chat.type !== 'private') return; // –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–≥–Ω–æ—Ä–∏–º –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª—ã

    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const text = msg.text?.trim();

    if (!text || text.startsWith('/')) return;
    if (!usersInProcess.has(userId)) return;

    const user = usersInProcess.get(userId);
    if (user.expectedChatId && user.expectedChatId !== chatId) return; // —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑ —Ç–æ–≥–æ —á–∞—Ç–∞

    // –®–∞–≥ 1 ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–≤–∞–π—Ç–∞
    if (user.step === 'invite') {
      const code = text;
      const res = await db.query(
        'SELECT * FROM invites WHERE invite_code = $1 AND is_active = true',
        [code]
      );
      if (res.rowCount === 0) {
        return bot.sendMessage(
          chatId,
          '‚ùå –ö–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. –í–≤–µ–¥–∏ —Å–Ω–æ–≤–∞:'
        );
      }

      user.data.inviteCode = code;
      user.data.clan = res.rows[0].clan_name;
      user.step = 'pubg_id';
      return bot.sendMessage(chatId, '‚úÖ –ö–æ–¥ –ø—Ä–∏–Ω—è—Ç. –í–≤–µ–¥–∏ —Å–≤–æ–π PUBG ID:');
    }

    // –®–∞–≥ 2 ‚Äî PUBG ID
    if (user.step === 'pubg_id') {
      user.data.pubg_id = text;
      user.step = 'name';
      return bot.sendMessage(chatId, '–í–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è:');
    }

    // –®–∞–≥ 3 ‚Äî –∏–º—è
    if (user.step === 'name') {
      user.data.name = text;
      user.step = 'nick';
      return bot.sendMessage(chatId, '–í–≤–µ–¥–∏ —Å–≤–æ–π –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫:');
    }

    // –®–∞–≥ 3.1 ‚Äî –Ω–∏–∫
    if (user.step === 'nick') {
      user.data.nick = text;
      user.step = 'age';
      return bot.sendMessage(chatId, '–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?');
    }

    // –®–∞–≥ 4 ‚Äî –≤–æ–∑—Ä–∞—Å—Ç
    if (user.step === 'age') {
      user.data.age = text;
      user.step = 'city';
      return bot.sendMessage(chatId, '–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞?');
    }

    // –®–∞–≥ 5 ‚Äî –≥–æ—Ä–æ–¥ ‚Üí —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    if (user.step === 'city') {
      user.data.city = text;

      const target_username = msg.from.username ? `@${msg.from.username}` : '';

      const dataToSave = {
        name: user.data.name,
        nick: user.data.nick || '',
        target_username, // –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        pubg_id: user.data.pubg_id,
        age: user.data.age,
        city: user.data.city,
        clan: user.data.clan,
        actor_id: userId,
        date: 0
      };
      try {
        await saveDescription(dataToSave);
        await db.query('UPDATE invites SET is_active = false WHERE invite_code = $1', [
          user.data.inviteCode
        ]);
        await saveMemberDb(dataToSave);

        await bot.sendMessage(
          chatId,
          'üéâ –¢—ã –ø—Ä–∏–Ω—è—Ç –≤ –∫–ª–∞–Ω! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–ª–∞–Ω CheckMate‚ôüÔ∏è'
        );

        if (Number(dataToSave.clan) === 1 || Number(dataToSave.clan) === 2 || 
            Number(dataToSave.clan) === 5) {
          await bot.sendMessage(chatId, inviteLink1);
        } else {
          await bot.sendMessage(chatId, inviteLink2);
        }
      } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—ë–º–µ –≤ –∫–ª–∞–Ω:', err);
        await bot.sendMessage(
          chatId,
          '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.'
        );
      } finally {
        usersInProcess.delete(userId);
      }
    }
  });
};
