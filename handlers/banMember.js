const { google } = require('googleapis');
const db = require('./db');
const isAdminChat = require('../admin/permissionAdminChat');
const getClanId = require('../clan/getClanId');
const getClanChats = require('../clan/getClanChat');

const SHEET_PREFIX = 'Clan';

async function getSheetIdByTitle(sheets, spreadsheetId, title) {
  const meta = await sheets.spreadsheets.get({ spreadsheetId });
  const sheet = meta.data.sheets.find(s => s.properties.title === title);
  return sheet ? sheet.properties.sheetId : null;
}

module.exports = function (bot, auth, SPREADSHEET_ID) {
  bot.onText(/^!–±–∞–Ω\s+@(\S+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    if (!isAdminChat(chatId)) return;

    const username = `@${match[1]}`; // —Ç–µ–≥ –≤–∏–¥–∞ @user
    const clanId = await getClanId(chatId);
    const chats = await getClanChats(clanId);
    console.log(chats);
    try {
      // 1) –Ω–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å—å –≤ –ë–î
      const res = await db.query(
        `SELECT actor_id, clan FROM clan_members WHERE LOWER(telegram_tag) = LOWER($1) AND clan_id = $2 LIMIT 1`,
        [username, clanId]
      );

      if (res.rowCount === 0) {
        console.log(res.rows);
        return bot.sendMessage(chatId, `‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ ${username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.`, {
          reply_to_message_id: msg.message_id,
        });
      }

      const { actor_id: actorId, clan } = res.rows[0];

      // 2) –ø–æ–º–µ—á–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º –≤ –ë–î
      await db.query(
        `UPDATE clan_members SET active = FALSE WHERE LOWER(telegram_tag) = LOWER($1) AND clan_id = $2`,
        [username, clanId]
      );

      // 3) –µ—Å–ª–∏ –µ—Å—Ç—å actorId ‚Äî –±–∞–Ω–∏–º –≤ —á–∞—Ç–µ
      if (actorId) {
        for (const chat of chats) {
          try {
            await bot.banChatMember(chat, actorId);      
            await new Promise(res => setTimeout(res, 400));
          } catch (err) {
            
          }
        }
      }

      if(clanId == 1){

      // 4) —É–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –ª–∏—Å—Ç–∞ Google Sheets (Clan{clan}) –ø–æ —Ç–µ–≥—É
      const client = await auth.getClient();
      const sheets = google.sheets({ version: 'v4', auth: client });
      const sheetTitle = `${SHEET_PREFIX}${clan}`;
      const sheetId = await getSheetIdByTitle(sheets, SPREADSHEET_ID, sheetTitle);

      if (sheetId !== null) {
        const sheetRes = await sheets.spreadsheets.values.get({
          spreadsheetId: SPREADSHEET_ID,
          range: `${sheetTitle}!A2:I`, // A..I: name,nickname,telegram_tag,pubg_id,age,city,clan,actor_id,created_at
        });

        const rows = sheetRes.data.values || [];
        const usernameIndex = 2; // C = telegram_tag
        const rowIndex = rows.findIndex(
          r => (r[usernameIndex] || '').toLowerCase() === username.toLowerCase()
        );

        if (rowIndex !== -1) {
          await sheets.spreadsheets.batchUpdate({
            spreadsheetId: SPREADSHEET_ID,
            requestBody: {
              requests: [{
                deleteDimension: {
                  range: {
                    sheetId,
                    dimension: 'ROWS',
                    startIndex: rowIndex + 1, // +1 –∏–∑-–∑–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                    endIndex: rowIndex + 2,
                  }
                }
              }]
            }
          });
        }
      }
      }
      await bot.sendMessage(
        chatId,
        actorId
          ? `üö´ ${username} –∑–∞–±–∞–Ω–µ–Ω: –≤ –ë–î –ø–æ–º–µ—á–µ–Ω –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º, –∏–∑ —Ç–∞–±–ª–∏—Ü—ã —É–¥–∞–ª—ë–Ω, –≤ —á–∞—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.`
          : `üö´ ${username} –ø–æ–º–µ—á–µ–Ω –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º –∏ —É–¥–∞–ª—ë–Ω –∏–∑ —Ç–∞–±–ª–∏—Ü—ã. –í —á–∞—Ç–µ –Ω–µ –∑–∞–±–∞–Ω–µ–Ω (–Ω–µ—Ç actor_id).`,
        { reply_to_message_id: msg.message_id }
      );

    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ:', err);
      await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ ${username}.`, {
        reply_to_message_id: msg.message_id,
      });
    }
  });
};
